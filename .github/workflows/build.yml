name: Build and Push Docker Image

on:
  push:
    branches:
      - feature/release-war
  workflow_dispatch:

env:
  java: 21

jobs:
  docker-build:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '${{ env.java }}'
          cache: 'gradle'

      - name: Build application
        run: |
          cd api-gateway
          ./gradlew clean bootWar

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker builder
        run: |
          docker buildx create --use
          docker buildx inspect --bootstrap

      - name: Get short commit hash for Docker tag
        run: echo "TAG=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_ENV

      - name: Get sanitized repository name
        run: echo "DOCKER_REPO=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and Push Docker Image
        run: |
          cd api-gateway
          docker buildx build \
            --platform linux/amd64 \
            --build-arg BUILDPLATFORM=linux/amd64 \
            --tag ghcr.io/${{ env.DOCKER_REPO }}:${{ env.TAG }} \
            --tag ghcr.io/${{ env.DOCKER_REPO }}:latest \
            --push .

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.gateway_war_version }}
          release_name: "${{ env.TAG }}"
          draft: false
          prerelease: false

      - name: Upload WAR asset to release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./api-gateway/build/libs/*.war
          asset_name: Gateway.war
          asset_content_type: application/java-archive
